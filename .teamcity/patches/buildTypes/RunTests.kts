package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.Swabra
import jetbrains.buildServer.configs.kotlin.buildFeatures.swabra
import jetbrains.buildServer.configs.kotlin.buildSteps.DotnetTestStep
import jetbrains.buildServer.configs.kotlin.buildSteps.dotnetTest
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.triggers.VcsTrigger
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'RunTests'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("RunTests")) {
    expectSteps {
        dotnetTest {
            projects = "TestProject5/TestProject5.csproj"
            sdk = "6"
            param("dotNetCoverage.dotCover.home.path", "%teamcity.tool.JetBrains.dotCover.CommandLineTools.DEFAULT%")
        }
        script {
            scriptContent = "ls"
        }
        dotnetTest {
            name = "New build step"
            projects = "TestProject1/TestProject1.csproj"
            filter = "FullyQualifiedName!~UnitTest1"
            sdk = "6"
            param("dotNetCoverage.dotCover.home.path", "%teamcity.tool.JetBrains.dotCover.CommandLineTools.DEFAULT%")
        }
    }
    steps {
        update<DotnetTestStep>(2) {
            enabled = false
            clearConditions()
        }
    }

    triggers {
        val trigger1 = find<VcsTrigger> {
            vcs {
                branchFilter = ""

                buildParams {
                    param("parFromTrigger", "parFromTriggervalue")
                }
            }
        }
        trigger1.apply {
            enabled = false
            clearBuildParams()
            buildParams {
                param("parFromTrigger", "parFromTriggervalue")
            }
        }
    }

    features {
        val feature1 = find<Swabra> {
            swabra {
                verbose = true
            }
        }
        feature1.apply {
            enabled = false
        }
    }

    dependencies {
        remove(RelativeId("Dep")) {
            snapshot {
            }
        }

        expect(RelativeId("Artdep")) {
            artifacts {
                buildRule = lastSuccessful()
                artifactRules = """
                    a* => .
                    b* => .
                """.trimIndent()
            }
        }
        update(RelativeId("Artdep")) {
            artifacts {
                buildRule = lastSuccessful()
                artifactRules = """
                    a* => .
                    b* => .
                """.trimIndent()
                enabled = false
            }
        }

    }
}
